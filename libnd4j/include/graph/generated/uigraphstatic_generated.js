// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var sd = sd || {};

/**
 * @const
 * @namespace
 */
sd.graph = sd.graph || {};

/**
 * @enum {number}
 */
sd.graph.UIInfoType = {
  GRAPH_STRUCTURE: 0,
  SYTEM_INFO: 1,
  START_EVENTS: 2
};

/**
 * @enum {string}
 */
sd.graph.UIInfoTypeName = {
  '0': 'GRAPH_STRUCTURE',
  '1': 'SYTEM_INFO',
  '2': 'START_EVENTS'
};

/**
 * @constructor
 */
sd.graph.UIStaticInfoRecord = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {sd.graph.UIStaticInfoRecord}
 */
sd.graph.UIStaticInfoRecord.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {sd.graph.UIStaticInfoRecord=} obj
 * @returns {sd.graph.UIStaticInfoRecord}
 */
sd.graph.UIStaticInfoRecord.getRootAsUIStaticInfoRecord = function(bb, obj) {
  return (obj || new sd.graph.UIStaticInfoRecord).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {sd.graph.UIStaticInfoRecord=} obj
 * @returns {sd.graph.UIStaticInfoRecord}
 */
sd.graph.UIStaticInfoRecord.getSizePrefixedRootAsUIStaticInfoRecord = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new sd.graph.UIStaticInfoRecord).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {sd.graph.UIInfoType}
 */
sd.graph.UIStaticInfoRecord.prototype.infoType = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {sd.graph.UIInfoType} */ (this.bb.readInt8(this.bb_pos + offset)) : sd.graph.UIInfoType.GRAPH_STRUCTURE;
};

/**
 * @param {flatbuffers.Builder} builder
 */
sd.graph.UIStaticInfoRecord.startUIStaticInfoRecord = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {sd.graph.UIInfoType} infoType
 */
sd.graph.UIStaticInfoRecord.addInfoType = function(builder, infoType) {
  builder.addFieldInt8(0, infoType, sd.graph.UIInfoType.GRAPH_STRUCTURE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIStaticInfoRecord.endUIStaticInfoRecord = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {sd.graph.UIInfoType} infoType
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIStaticInfoRecord.createUIStaticInfoRecord = function(builder, infoType) {
  sd.graph.UIStaticInfoRecord.startUIStaticInfoRecord(builder);
  sd.graph.UIStaticInfoRecord.addInfoType(builder, infoType);
  return sd.graph.UIStaticInfoRecord.endUIStaticInfoRecord(builder);
}

/**
 * @constructor
 */
sd.graph.UISystemInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {sd.graph.UISystemInfo}
 */
sd.graph.UISystemInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {sd.graph.UISystemInfo=} obj
 * @returns {sd.graph.UISystemInfo}
 */
sd.graph.UISystemInfo.getRootAsUISystemInfo = function(bb, obj) {
  return (obj || new sd.graph.UISystemInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {sd.graph.UISystemInfo=} obj
 * @returns {sd.graph.UISystemInfo}
 */
sd.graph.UISystemInfo.getSizePrefixedRootAsUISystemInfo = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new sd.graph.UISystemInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
sd.graph.UISystemInfo.prototype.physicalCores = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
sd.graph.UISystemInfo.startUISystemInfo = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} physicalCores
 */
sd.graph.UISystemInfo.addPhysicalCores = function(builder, physicalCores) {
  builder.addFieldInt32(0, physicalCores, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
sd.graph.UISystemInfo.endUISystemInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} physicalCores
 * @returns {flatbuffers.Offset}
 */
sd.graph.UISystemInfo.createUISystemInfo = function(builder, physicalCores) {
  sd.graph.UISystemInfo.startUISystemInfo(builder);
  sd.graph.UISystemInfo.addPhysicalCores(builder, physicalCores);
  return sd.graph.UISystemInfo.endUISystemInfo(builder);
}

/**
 * @constructor
 */
sd.graph.UIGraphStructure = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {sd.graph.UIGraphStructure}
 */
sd.graph.UIGraphStructure.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {sd.graph.UIGraphStructure=} obj
 * @returns {sd.graph.UIGraphStructure}
 */
sd.graph.UIGraphStructure.getRootAsUIGraphStructure = function(bb, obj) {
  return (obj || new sd.graph.UIGraphStructure).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {sd.graph.UIGraphStructure=} obj
 * @returns {sd.graph.UIGraphStructure}
 */
sd.graph.UIGraphStructure.getSizePrefixedRootAsUIGraphStructure = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new sd.graph.UIGraphStructure).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
sd.graph.UIGraphStructure.prototype.inputs = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
sd.graph.UIGraphStructure.prototype.inputsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {sd.graph.IntPair=} obj
 * @returns {sd.graph.IntPair}
 */
sd.graph.UIGraphStructure.prototype.inputsPair = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new sd.graph.IntPair).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
sd.graph.UIGraphStructure.prototype.inputsPairLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
sd.graph.UIGraphStructure.prototype.outputs = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
sd.graph.UIGraphStructure.prototype.outputsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {sd.graph.UIVariable=} obj
 * @returns {sd.graph.UIVariable}
 */
sd.graph.UIGraphStructure.prototype.variables = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new sd.graph.UIVariable).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
sd.graph.UIGraphStructure.prototype.variablesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {sd.graph.UIOp=} obj
 * @returns {sd.graph.UIOp}
 */
sd.graph.UIGraphStructure.prototype.ops = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new sd.graph.UIOp).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
sd.graph.UIGraphStructure.prototype.opsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
sd.graph.UIGraphStructure.startUIGraphStructure = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} inputsOffset
 */
sd.graph.UIGraphStructure.addInputs = function(builder, inputsOffset) {
  builder.addFieldOffset(0, inputsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIGraphStructure.createInputsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
sd.graph.UIGraphStructure.startInputsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} inputsPairOffset
 */
sd.graph.UIGraphStructure.addInputsPair = function(builder, inputsPairOffset) {
  builder.addFieldOffset(1, inputsPairOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIGraphStructure.createInputsPairVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
sd.graph.UIGraphStructure.startInputsPairVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} outputsOffset
 */
sd.graph.UIGraphStructure.addOutputs = function(builder, outputsOffset) {
  builder.addFieldOffset(2, outputsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIGraphStructure.createOutputsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
sd.graph.UIGraphStructure.startOutputsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} variablesOffset
 */
sd.graph.UIGraphStructure.addVariables = function(builder, variablesOffset) {
  builder.addFieldOffset(3, variablesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIGraphStructure.createVariablesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
sd.graph.UIGraphStructure.startVariablesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} opsOffset
 */
sd.graph.UIGraphStructure.addOps = function(builder, opsOffset) {
  builder.addFieldOffset(4, opsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIGraphStructure.createOpsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
sd.graph.UIGraphStructure.startOpsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIGraphStructure.endUIGraphStructure = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} inputsOffset
 * @param {flatbuffers.Offset} inputsPairOffset
 * @param {flatbuffers.Offset} outputsOffset
 * @param {flatbuffers.Offset} variablesOffset
 * @param {flatbuffers.Offset} opsOffset
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIGraphStructure.createUIGraphStructure = function(builder, inputsOffset, inputsPairOffset, outputsOffset, variablesOffset, opsOffset) {
  sd.graph.UIGraphStructure.startUIGraphStructure(builder);
  sd.graph.UIGraphStructure.addInputs(builder, inputsOffset);
  sd.graph.UIGraphStructure.addInputsPair(builder, inputsPairOffset);
  sd.graph.UIGraphStructure.addOutputs(builder, outputsOffset);
  sd.graph.UIGraphStructure.addVariables(builder, variablesOffset);
  sd.graph.UIGraphStructure.addOps(builder, opsOffset);
  return sd.graph.UIGraphStructure.endUIGraphStructure(builder);
}

/**
 * @constructor
 */
sd.graph.UIVariable = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {sd.graph.UIVariable}
 */
sd.graph.UIVariable.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {sd.graph.UIVariable=} obj
 * @returns {sd.graph.UIVariable}
 */
sd.graph.UIVariable.getRootAsUIVariable = function(bb, obj) {
  return (obj || new sd.graph.UIVariable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {sd.graph.UIVariable=} obj
 * @returns {sd.graph.UIVariable}
 */
sd.graph.UIVariable.getSizePrefixedRootAsUIVariable = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new sd.graph.UIVariable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {sd.graph.IntPair=} obj
 * @returns {sd.graph.IntPair|null}
 */
sd.graph.UIVariable.prototype.id = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new sd.graph.IntPair).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
sd.graph.UIVariable.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {sd.graph.VarType}
 */
sd.graph.UIVariable.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {sd.graph.VarType} */ (this.bb.readInt8(this.bb_pos + offset)) : sd.graph.VarType.VARIABLE;
};

/**
 * @returns {sd.graph.DType}
 */
sd.graph.UIVariable.prototype.datatype = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? /** @type {sd.graph.DType} */ (this.bb.readInt8(this.bb_pos + offset)) : sd.graph.DType.INHERIT;
};

/**
 * @param {number} index
 * @returns {flatbuffers.Long}
 */
sd.graph.UIVariable.prototype.shape = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) : this.bb.createLong(0, 0);
};

/**
 * @returns {number}
 */
sd.graph.UIVariable.prototype.shapeLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
sd.graph.UIVariable.prototype.controlDeps = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
sd.graph.UIVariable.prototype.controlDepsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
sd.graph.UIVariable.prototype.outputOfOp = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
sd.graph.UIVariable.prototype.inputsForOp = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
sd.graph.UIVariable.prototype.inputsForOpLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
sd.graph.UIVariable.prototype.controlDepsForOp = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
sd.graph.UIVariable.prototype.controlDepsForOpLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
sd.graph.UIVariable.prototype.controlDepsForVar = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
sd.graph.UIVariable.prototype.controlDepsForVarLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
sd.graph.UIVariable.prototype.gradientVariable = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
sd.graph.UIVariable.prototype.uiLabelExtra = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {sd.graph.FlatArray=} obj
 * @returns {sd.graph.FlatArray|null}
 */
sd.graph.UIVariable.prototype.constantValue = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 28);
  return offset ? (obj || new sd.graph.FlatArray).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
sd.graph.UIVariable.startUIVariable = function(builder) {
  builder.startObject(13);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} idOffset
 */
sd.graph.UIVariable.addId = function(builder, idOffset) {
  builder.addFieldOffset(0, idOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
sd.graph.UIVariable.addName = function(builder, nameOffset) {
  builder.addFieldOffset(1, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {sd.graph.VarType} type
 */
sd.graph.UIVariable.addType = function(builder, type) {
  builder.addFieldInt8(2, type, sd.graph.VarType.VARIABLE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {sd.graph.DType} datatype
 */
sd.graph.UIVariable.addDatatype = function(builder, datatype) {
  builder.addFieldInt8(3, datatype, sd.graph.DType.INHERIT);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} shapeOffset
 */
sd.graph.UIVariable.addShape = function(builder, shapeOffset) {
  builder.addFieldOffset(4, shapeOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Long>} data
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIVariable.createShapeVector = function(builder, data) {
  builder.startVector(8, data.length, 8);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
sd.graph.UIVariable.startShapeVector = function(builder, numElems) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} controlDepsOffset
 */
sd.graph.UIVariable.addControlDeps = function(builder, controlDepsOffset) {
  builder.addFieldOffset(5, controlDepsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIVariable.createControlDepsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
sd.graph.UIVariable.startControlDepsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} outputOfOpOffset
 */
sd.graph.UIVariable.addOutputOfOp = function(builder, outputOfOpOffset) {
  builder.addFieldOffset(6, outputOfOpOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} inputsForOpOffset
 */
sd.graph.UIVariable.addInputsForOp = function(builder, inputsForOpOffset) {
  builder.addFieldOffset(7, inputsForOpOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIVariable.createInputsForOpVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
sd.graph.UIVariable.startInputsForOpVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} controlDepsForOpOffset
 */
sd.graph.UIVariable.addControlDepsForOp = function(builder, controlDepsForOpOffset) {
  builder.addFieldOffset(8, controlDepsForOpOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIVariable.createControlDepsForOpVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
sd.graph.UIVariable.startControlDepsForOpVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} controlDepsForVarOffset
 */
sd.graph.UIVariable.addControlDepsForVar = function(builder, controlDepsForVarOffset) {
  builder.addFieldOffset(9, controlDepsForVarOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIVariable.createControlDepsForVarVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
sd.graph.UIVariable.startControlDepsForVarVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} gradientVariableOffset
 */
sd.graph.UIVariable.addGradientVariable = function(builder, gradientVariableOffset) {
  builder.addFieldOffset(10, gradientVariableOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} uiLabelExtraOffset
 */
sd.graph.UIVariable.addUiLabelExtra = function(builder, uiLabelExtraOffset) {
  builder.addFieldOffset(11, uiLabelExtraOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} constantValueOffset
 */
sd.graph.UIVariable.addConstantValue = function(builder, constantValueOffset) {
  builder.addFieldOffset(12, constantValueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIVariable.endUIVariable = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} idOffset
 * @param {flatbuffers.Offset} nameOffset
 * @param {NS17287488412074126892.sd.graph.VarType} type
 * @param {NS2914996894544545883.sd.graph.DType} datatype
 * @param {flatbuffers.Offset} shapeOffset
 * @param {flatbuffers.Offset} controlDepsOffset
 * @param {flatbuffers.Offset} outputOfOpOffset
 * @param {flatbuffers.Offset} inputsForOpOffset
 * @param {flatbuffers.Offset} controlDepsForOpOffset
 * @param {flatbuffers.Offset} controlDepsForVarOffset
 * @param {flatbuffers.Offset} gradientVariableOffset
 * @param {flatbuffers.Offset} uiLabelExtraOffset
 * @param {flatbuffers.Offset} constantValueOffset
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIVariable.createUIVariable = function(builder, idOffset, nameOffset, type, datatype, shapeOffset, controlDepsOffset, outputOfOpOffset, inputsForOpOffset, controlDepsForOpOffset, controlDepsForVarOffset, gradientVariableOffset, uiLabelExtraOffset, constantValueOffset) {
  sd.graph.UIVariable.startUIVariable(builder);
  sd.graph.UIVariable.addId(builder, idOffset);
  sd.graph.UIVariable.addName(builder, nameOffset);
  sd.graph.UIVariable.addType(builder, type);
  sd.graph.UIVariable.addDatatype(builder, datatype);
  sd.graph.UIVariable.addShape(builder, shapeOffset);
  sd.graph.UIVariable.addControlDeps(builder, controlDepsOffset);
  sd.graph.UIVariable.addOutputOfOp(builder, outputOfOpOffset);
  sd.graph.UIVariable.addInputsForOp(builder, inputsForOpOffset);
  sd.graph.UIVariable.addControlDepsForOp(builder, controlDepsForOpOffset);
  sd.graph.UIVariable.addControlDepsForVar(builder, controlDepsForVarOffset);
  sd.graph.UIVariable.addGradientVariable(builder, gradientVariableOffset);
  sd.graph.UIVariable.addUiLabelExtra(builder, uiLabelExtraOffset);
  sd.graph.UIVariable.addConstantValue(builder, constantValueOffset);
  return sd.graph.UIVariable.endUIVariable(builder);
}

/**
 * @constructor
 */
sd.graph.UIOp = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {sd.graph.UIOp}
 */
sd.graph.UIOp.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {sd.graph.UIOp=} obj
 * @returns {sd.graph.UIOp}
 */
sd.graph.UIOp.getRootAsUIOp = function(bb, obj) {
  return (obj || new sd.graph.UIOp).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {sd.graph.UIOp=} obj
 * @returns {sd.graph.UIOp}
 */
sd.graph.UIOp.getSizePrefixedRootAsUIOp = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new sd.graph.UIOp).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
sd.graph.UIOp.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
sd.graph.UIOp.prototype.opName = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
sd.graph.UIOp.prototype.inputs = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
sd.graph.UIOp.prototype.inputsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
sd.graph.UIOp.prototype.outputs = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
sd.graph.UIOp.prototype.outputsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
sd.graph.UIOp.prototype.controlDeps = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
sd.graph.UIOp.prototype.controlDepsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
sd.graph.UIOp.prototype.uiLabelExtra = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
sd.graph.UIOp.startUIOp = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
sd.graph.UIOp.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} opNameOffset
 */
sd.graph.UIOp.addOpName = function(builder, opNameOffset) {
  builder.addFieldOffset(1, opNameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} inputsOffset
 */
sd.graph.UIOp.addInputs = function(builder, inputsOffset) {
  builder.addFieldOffset(2, inputsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIOp.createInputsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
sd.graph.UIOp.startInputsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} outputsOffset
 */
sd.graph.UIOp.addOutputs = function(builder, outputsOffset) {
  builder.addFieldOffset(3, outputsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIOp.createOutputsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
sd.graph.UIOp.startOutputsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} controlDepsOffset
 */
sd.graph.UIOp.addControlDeps = function(builder, controlDepsOffset) {
  builder.addFieldOffset(4, controlDepsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIOp.createControlDepsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
sd.graph.UIOp.startControlDepsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} uiLabelExtraOffset
 */
sd.graph.UIOp.addUiLabelExtra = function(builder, uiLabelExtraOffset) {
  builder.addFieldOffset(5, uiLabelExtraOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIOp.endUIOp = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 * @param {flatbuffers.Offset} opNameOffset
 * @param {flatbuffers.Offset} inputsOffset
 * @param {flatbuffers.Offset} outputsOffset
 * @param {flatbuffers.Offset} controlDepsOffset
 * @param {flatbuffers.Offset} uiLabelExtraOffset
 * @returns {flatbuffers.Offset}
 */
sd.graph.UIOp.createUIOp = function(builder, nameOffset, opNameOffset, inputsOffset, outputsOffset, controlDepsOffset, uiLabelExtraOffset) {
  sd.graph.UIOp.startUIOp(builder);
  sd.graph.UIOp.addName(builder, nameOffset);
  sd.graph.UIOp.addOpName(builder, opNameOffset);
  sd.graph.UIOp.addInputs(builder, inputsOffset);
  sd.graph.UIOp.addOutputs(builder, outputsOffset);
  sd.graph.UIOp.addControlDeps(builder, controlDepsOffset);
  sd.graph.UIOp.addUiLabelExtra(builder, uiLabelExtraOffset);
  return sd.graph.UIOp.endUIOp(builder);
}

// Exports for Node.js and RequireJS
this.sd = sd;
