// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace sd.graph
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct UIGraphStructure : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static UIGraphStructure GetRootAsUIGraphStructure(ByteBuffer _bb) { return GetRootAsUIGraphStructure(_bb, new UIGraphStructure()); }
  public static UIGraphStructure GetRootAsUIGraphStructure(ByteBuffer _bb, UIGraphStructure obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UIGraphStructure __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Inputs(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int InputsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public sd.graph.IntPair? InputsPair(int j) { int o = __p.__offset(6); return o != 0 ? (sd.graph.IntPair?)(new sd.graph.IntPair()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int InputsPairLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Outputs(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int OutputsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public sd.graph.UIVariable? Variables(int j) { int o = __p.__offset(10); return o != 0 ? (sd.graph.UIVariable?)(new sd.graph.UIVariable()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int VariablesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public sd.graph.UIOp? Ops(int j) { int o = __p.__offset(12); return o != 0 ? (sd.graph.UIOp?)(new sd.graph.UIOp()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OpsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<sd.graph.UIGraphStructure> CreateUIGraphStructure(FlatBufferBuilder builder,
      VectorOffset inputsOffset = default(VectorOffset),
      VectorOffset inputsPairOffset = default(VectorOffset),
      VectorOffset outputsOffset = default(VectorOffset),
      VectorOffset variablesOffset = default(VectorOffset),
      VectorOffset opsOffset = default(VectorOffset)) {
    builder.StartTable(5);
    UIGraphStructure.AddOps(builder, opsOffset);
    UIGraphStructure.AddVariables(builder, variablesOffset);
    UIGraphStructure.AddOutputs(builder, outputsOffset);
    UIGraphStructure.AddInputsPair(builder, inputsPairOffset);
    UIGraphStructure.AddInputs(builder, inputsOffset);
    return UIGraphStructure.EndUIGraphStructure(builder);
  }

  public static void StartUIGraphStructure(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddInputs(FlatBufferBuilder builder, VectorOffset inputsOffset) { builder.AddOffset(0, inputsOffset.Value, 0); }
  public static VectorOffset CreateInputsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInputsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInputsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInputsPair(FlatBufferBuilder builder, VectorOffset inputsPairOffset) { builder.AddOffset(1, inputsPairOffset.Value, 0); }
  public static VectorOffset CreateInputsPairVector(FlatBufferBuilder builder, Offset<sd.graph.IntPair>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInputsPairVectorBlock(FlatBufferBuilder builder, Offset<sd.graph.IntPair>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInputsPairVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOutputs(FlatBufferBuilder builder, VectorOffset outputsOffset) { builder.AddOffset(2, outputsOffset.Value, 0); }
  public static VectorOffset CreateOutputsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOutputsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOutputsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVariables(FlatBufferBuilder builder, VectorOffset variablesOffset) { builder.AddOffset(3, variablesOffset.Value, 0); }
  public static VectorOffset CreateVariablesVector(FlatBufferBuilder builder, Offset<sd.graph.UIVariable>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVariablesVectorBlock(FlatBufferBuilder builder, Offset<sd.graph.UIVariable>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartVariablesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOps(FlatBufferBuilder builder, VectorOffset opsOffset) { builder.AddOffset(4, opsOffset.Value, 0); }
  public static VectorOffset CreateOpsVector(FlatBufferBuilder builder, Offset<sd.graph.UIOp>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOpsVectorBlock(FlatBufferBuilder builder, Offset<sd.graph.UIOp>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOpsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<sd.graph.UIGraphStructure> EndUIGraphStructure(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sd.graph.UIGraphStructure>(o);
  }
};


}
